#############################################################################
#   This is a configuration file for the fabric-ca-server command.
#   这是一个 fabric-ca-server 命令的配置文件
#   COMMAND LINE ARGUMENTS AND ENVIRONMENT VARIABLES
#   命令行参数和环境变量
#   ------------------------------------------------
#   Each configuration element can be overridden via command line
#   arguments or environment variables.  The precedence for determining
#   the value of each element is as follows:
#   每个配置的值都可以通过命令行参数和环境变量来覆盖，优先级如下：
#   1) command line argument
#      命令行参数
#      Examples:
#      a) --port 443
#         To set the listening port
#         设置监听端口
#      b) --ca.keyfile ../mykey.pem
#         To set the "keyfile" element in the "ca" section below;
#         note the '.' separator character.
#         在下面的“ ca”部分中设置“ keyfile”元素；
#         注意“。”分隔符。
#   2) environment variable
#      环境变量
#      Examples:
#      a) FABRIC_CA_SERVER_PORT=443
#         To set the listening port
#      b) FABRIC_CA_SERVER_CA_KEYFILE="../mykey.pem"
#         To set the "keyfile" element in the "ca" section below;
#         note the '_' separator character.
#   3) configuration file
#      配置文件
#   4) default value (if there is one)
#      默认值
#      All default values are shown beside each element below.
#      所有的默认值都被展示在下面对应元素了
#
#   FILE NAME ELEMENTS
#   ------------------
#   The value of all fields whose name ends with "file" or "files" are
#   name or names of other files.
#   For example, see "tls.certfile" and "tls.clientauth.certfiles".
#   The value of each of these fields can be a simple filename, a
#   relative path, or an absolute path.  If the value is not an
#   absolute path, it is interpretted as being relative to the location
#   of this configuration file.
# 
#   以 file 或者 files 结尾的所有字段，他们的值是其他文件的名称，例如：
#   tls.certfile 和 tls.clientauth.certfiles 。每个文件可以是简单的文件名、
#   绝对路径或相对路径，如果不是绝对路径，则会被解释为相对于配置文件的相对路径。
#
#############################################################################

# Version of config file
version: 1.2.0

# Server's listening port (default: 7054)
# 服务器监听接口
port: 7054

# Enables debug logging (default: false)
# debug 日志
debug: false

# Size limit of an acceptable CRL in bytes (default: 512000)
# 接受的 CRL 大小限制
crlsizelimit: 512000

#############################################################################
#  TLS section for the server's listening port
#  服务器监听端口的 TLS 部分
#
#  The following types are supported for client authentication: NoClientCert,
#  RequestClientCert, RequireAnyClientCert, VerifyClientCertIfGiven,
#  and RequireAndVerifyClientCert.
#  客户端身份验证支持的类型包括如下：
#    - NoClientCert
#    - RequestClientCert
#    - RequireAnyClientCert
#    - VerifyClientCertIfGiven
#    - RequireAndVerifyClientCert
#
#  Certfiles is a list of root certificate authorities that the server uses
#  when verifying client certificates.
#  Certfiles 是服务器在验证客户端证书时，使用的根证书颁发机构的列表。
#############################################################################
tls:
  # Enable TLS (default: false)
  enabled: true
  # TLS for the server's listening port
  certfile:
  keyfile:
  clientauth:
    type: noclientcert
    certfiles:

#############################################################################
#  The CA section contains information related to the Certificate Authority
#  including the name of the CA, which should be unique for all members
#  of a blockchain network.  It also includes the key and certificate files
#  used when issuing enrollment certificates (ECerts) and transaction
#  certificates (TCerts).
#  The chainfile (if it exists) contains the certificate chain which
#  should be trusted for this CA, where the 1st in the chain is always the
#  root CA certificate.
#  CA部分包含与证书颁发机构相关的信息，包括CA的名称，对于区块链网络的所有成员而言，
#  CA的名称应该是唯一的。
#  它还包括颁发注册证书（ECerts）和交易证书（TCerts）时使用的密钥和证书文件。
#  链文件（如果存在）包含此CA应该信任的证书链，其中链中的第一个始终是根CA证书。
#############################################################################
ca:
  # Name of this CA
  name: Org1CA
  # Key file (is only used to import a private key into BCCSP)
  keyfile:
  # Certificate file (default: ca-cert.pem)
  certfile:
  # Chain file
  chainfile:

#############################################################################
#  The gencrl REST endpoint is used to generate a CRL that contains revoked
#  certificates. This section contains configuration options that are used
#  during gencrl request processing.
#  gencrl REST端点用于生成包含已撤销证书的CRL。
#  本节包含在gencrl请求处理期间使用的配置选项。
#############################################################################
crl:
  # Specifies expiration for the generated CRL. The number of hours
  # specified by this property is added to the UTC time, the resulting time
  # is used to set the 'Next Update' date of the CRL.
  # 指定生成的CRL的到期时间。
  # 此属性指定的小时数被添加到UTC时间，所得到的时间用于设置CRL的“下一次更新”日期。
  expiry: 24h

#############################################################################
#  The registry section controls how the fabric-ca-server does two things:
#  1) authenticates enrollment requests which contain a username and password
#     (also known as an enrollment ID and secret).
#  2) once authenticated, retrieves the identity's attribute names and
#     values which the fabric-ca-server optionally puts into TCerts
#     which it issues for transacting on the Hyperledger Fabric blockchain.
#     These attributes are useful for making access control decisions in
#     chaincode.
#  There are two main configuration options:
#  1) The fabric-ca-server is the registry.
#     This is true if "ldap.enabled" in the ldap section below is false.
#  2) An LDAP server is the registry, in which case the fabric-ca-server
#     calls the LDAP server to perform these tasks.
#     This is true if "ldap.enabled" in the ldap section below is true,
#     which means this "registry" section is ignored.
#  注册表部分控制 fabric-ca-server 如何执行两件事：
#  1）对包含用户名和密码（也称为注册ID和密码）的注册请求进行身份验证。 
#  2）一旦通过身份验证，就检索身份的属性名称和值，fabric-ca-server可以选择将该身份名
#     和值放入TCert中，该证书将发布给在Hyperledger Fabric区块链上进行交易。这些属性
#     对于在链码中做出访问控制决策很有用。
#  主要有两个配置选项：
#  1）fabric-ca-server是注册表。
#     如果以下ldap部分中的“ ldap.enabled”为false，则为true。 
#  2）LDAP服务器是注册表，在这种情况下，fabric-ca-server会调用LDAP服务器来执行这些任务。
#     如果以下ldap部分中的“ ldap.enabled”为true，则为true，这意味着该“ registry”部分将被忽略。
#############################################################################
registry:
  # Maximum number of times a password/secret can be reused for enrollment
  # (default: -1, which means there is no limit)
  # 密码/秘密可以重复使用以进行注册的最大次数
  # （默认值：-1，表示没有限制）
  maxenrollments: -1

  # Contains identity information which is used when LDAP is disabled
  # 包含禁用LDAP时使用的身份信息
  identities:
     - name: admin
       pass: adminpw
       type: client
       affiliation: ""
       attrs:
          hf.Registrar.Roles: "*"
          hf.Registrar.DelegateRoles: "*"
          hf.Revoker: true
          hf.IntermediateCA: true
          hf.GenCRL: true
          hf.Registrar.Attributes: "*"
          hf.AffiliationMgr: true

#############################################################################
#  Database section
#  Supported types are: "sqlite3", "postgres", and "mysql".
#  The datasource value depends on the type.
#  If the type is "sqlite3", the datasource value is a file name to use
#  as the database store.  Since "sqlite3" is an embedded database, it
#  may not be used if you want to run the fabric-ca-server in a cluster.
#  To run the fabric-ca-server in a cluster, you must choose "postgres"
#  or "mysql".
#  数据库部分受支持的类型为：“ sqlite3”，“ postgres”和“ mysql”。
#  数据源值取决于类型。
#  如果类型为“ sqlite3”，则数据源值是用作数据库存储的文件名。
#  由于“ sqlite3”是嵌入式数据库，因此如果要在群集中运行 fabric-ca-server ，则可能无法使用它。
#  要在群集中运行 fabric-ca-server ，必须选择“ postgres”或“ mysql”。
#############################################################################
db:
  type: sqlite3
  datasource: fabric-ca-server.db
  tls:
      enabled: false
      certfiles:
      client:
        certfile:
        keyfile:

#############################################################################
#  LDAP section
#  If LDAP is enabled, the fabric-ca-server calls LDAP to:
#  1) authenticate enrollment ID and secret (i.e. username and password)
#     for enrollment requests;
#  2) To retrieve identity attributes
#  LDAP部分如果启用了LDAP，Fabric-ca-server会调用LDAP来：
#     1）验证注册请求的注册ID和密码（即用户名和密码）； 
#     2）检索身份属性
#############################################################################
ldap:
   # Enables or disables the LDAP client (default: false)
   # If this is set to true, the "registry" section is ignored.
   # 启用或禁用LDAP客户端（默认值：false）
   # 如果将其设置为true，则将忽略“注册表”部分。
   enabled: false
   # The URL of the LDAP server
   # LDAP服务器的URL
   url: ldap://<adminDN>:<adminPassword>@<host>:<port>/<base>
   # TLS configuration for the client connection to the LDAP server
   # 客户端与LDAP服务器的连接的TLS配置
   tls:
      certfiles:
      client:
         certfile:
         keyfile:
   # Attribute related configuration for mapping from LDAP entries to Fabric CA attributes
   # 从 LDAP 条目到 Fabric CA 属性的映射的与属性相关的配置
   attribute:
      # 'names' is an array of strings containing the LDAP attribute names which are
      # requested from the LDAP server for an LDAP identity's entry
      # “名称”是包含LDAP属性名称的字符串数组，这些属性是 LDAP 服务器为 LDAP 身份输入而请求的
      names: ['uid','member']
      # The 'converters' section is used to convert an LDAP entry to the value of
      # a fabric CA attribute.
      # For example, the following converts an LDAP 'uid' attribute
      # whose value begins with 'revoker' to a fabric CA attribute
      # named "hf.Revoker" with a value of "true" (because the boolean expression
      # evaluates to true).
      # “转换器”部分用于将LDAP条目转换为结构CA属性的值。
      # 例如，以下内容将其值以'revoker'开头的 LDAP 'uid'属性
      # 转换为值为“ true”、属性名“ hf.Revoker”的 Fabric CA （因为布尔表达式的值为true）。
      #    converters:
      #       - name: hf.Revoker
      #         value: attr("uid") =~ "revoker*"
      converters:
         - name:
           value:
      # The 'maps' section contains named maps which may be referenced by the 'map'
      # function in the 'converters' section to map LDAP responses to arbitrary values.
      # For example, assume a user has an LDAP attribute named 'member' which has multiple
      # values which are each a distinguished name (i.e. a DN). For simplicity, assume the
      # values of the 'member' attribute are 'dn1', 'dn2', and 'dn3'.
      # Further assume the following configuration.
      #    converters:
      #       - name: hf.Registrar.Roles
      #         value: map(attr("member"),"groups")
      #    maps:
      #       groups:
      #          - name: dn1
      #            value: peer
      #          - name: dn2
      #            value: client
      # The value of the user's 'hf.Registrar.Roles' attribute is then computed to be
      # "peer,client,dn3".  This is because the value of 'attr("member")' is
      # "dn1,dn2,dn3", and the call to 'map' with a 2nd argument of
      # "group" replaces "dn1" with "peer" and "dn2" with "client".
      maps:
         groups:
            - name:
              value:

#############################################################################
# Affiliations section. Fabric CA server can be bootstrapped with the
# affiliations specified in this section. Affiliations are specified as maps.
# For example:
# 隶属关系部分。 
# Fabric CA 服务器可以使用本节中指定的从属关系进行引导。
# 关联关系指定为 maps。
# 例如：
#   businessunit1:
#     department1:
#       - team1
#   businessunit2:
#     - department2
#     - department3
#
# Affiliations are hierarchical in nature. In the above example,
# department1 (used as businessunit1.department1) is the child of businessunit1.
# team1 (used as businessunit1.department1.team1) is the child of department1.
# department2 (used as businessunit2.department2) and department3 (businessunit2.department3)
# are children of businessunit2.
# Note: Affiliations are case sensitive except for the non-leaf affiliations
# (like businessunit1, department1, businessunit2) that are specified in the configuration file,
# which are always stored in lower case.
# 隶属关系本质上是分层的。
# 在上面的示例中， department1 （用作 businessunit1.department1 ）是 businessunit1 的子级。 
# team1 （用作 businessunit1.department1.team1 ）是 Department1 的子级。 
# department2 （用作 businessunit2.department2 ）和 department3 （ businessunit2.department3 ）是 businessunit2 的子级。
# 注意：关联关系区分大小写，但配置文件中指定的非叶子关联关系
# （例如businessunit1，department1，businessunit2）除外，这些关联关系始终以小写形式存储。
#############################################################################
affiliations:
   org1:
      - department1
      - department2
   org2:
      - department1

#############################################################################
#  Signing section
#
#  The "default" subsection is used to sign enrollment certificates;
#  the default expiration ("expiry" field) is "8760h", which is 1 year in hours.
#
#  The "ca" profile subsection is used to sign intermediate CA certificates;
#  the default expiration ("expiry" field) is "43800h" which is 5 years in hours.
#  Note that "isca" is true, meaning that it issues a CA certificate.
#  A maxpathlen of 0 means that the intermediate CA cannot issue other
#  intermediate CA certificates, though it can still issue end entity certificates.
#  (See RFC 5280, section 4.2.1.9)
#
#  The "tls" profile subsection is used to sign TLS certificate requests;
#  the default expiration ("expiry" field) is "8760h", which is 1 year in hours.
# 签名部分“默认”子部分用于签署注册证书；
# 
# 默认有效期（“有效期”字段）为“ 8760h”，以小时为单位。 
# 
# “ ca”配置文件小节用于签署中间的CA证书；
# 默认有效期（“有效期”字段）为“ 43800h”，以小时为单位5年。
# 
# 请注意，“ isca”为true，表示它颁发了CA证书。 
# maxpathlen为0表示中间CA虽然仍可以颁发最终实体证书，但不能颁发其他中间CA证书。 
# （请参阅RFC 5280，第4.2.1.9节）“ tls”配置文件子节用于签署TLS证书请求；
# 默认有效期（“有效期”字段）为“ 8760h”，以小时为单位。
#############################################################################
signing:
    default:
      usage:
        - digital signature
      expiry: 8760h
    profiles:
      ca:
         usage:
           - cert sign
           - crl sign
         expiry: 43800h
         caconstraint:
           isca: true
           maxpathlen: 0
      tls:
         usage:
            - signing
            - key encipherment
            - server auth
            - client auth
            - key agreement
         expiry: 8760h

###########################################################################
#  Certificate Signing Request (CSR) section.
#  This controls the creation of the root CA certificate.
#  The expiration for the root CA certificate is configured with the
#  "ca.expiry" field below, whose default value is "131400h" which is
#  15 years in hours.
#  The pathlength field is used to limit CA certificate hierarchy as described
#  in section 4.2.1.9 of RFC 5280.
#  Examples:
#  1) No pathlength value means no limit is requested.
#  2) pathlength == 1 means a limit of 1 is requested which is the default for
#     a root CA.  This means the root CA can issue intermediate CA certificates,
#     but these intermediate CAs may not in turn issue other CA certificates
#     though they can still issue end entity certificates.
#  3) pathlength == 0 means a limit of 0 is requested;
#     this is the default for an intermediate CA, which means it can not issue
#     CA certificates though it can still issue end entity certificates.
#  证书签名请求（CSR）部分。
#  这控制了根CA证书的创建。
#  根CA证书的过期由下面的“ ca.expiry”字段配置，其默认值为“ 131400h”，以小时为单位15年。
#  如RFC 5280的4.2.1.9节所述，路径长度字段用于限制CA证书层次结构。示例：
#  1）没有路径长度值表示没有限制。 
#  2）pathlength == 1表示请求的限制为1，这是根CA的默认设置。
#    这意味着根CA可以颁发中间CA证书，但是这些中间CA可以依次颁发最终实体证书，但它们可能又不会颁发其他CA证书。 
#  3）pathlength == 0表示请求限制为0；
#    这是中间CA的默认设置，这意味着尽管它仍可以颁发最终实体证书，但它不能颁发CA证书。
###########################################################################
csr:
   cn: ca.org1.example.com
   names:
      - C: US
        ST: "North Carolina"
        L: "Durham"
        O: org1.example.com
        OU:
   hosts:
     - localhost
     - org1.example.com
   ca:
      expiry: 131400h
      pathlength: 1

#############################################################################
# BCCSP (BlockChain Crypto Service Provider) section is used to select which
# crypto library implementation to use
# BCCSP（BlockChain加密服务提供者）这部分用于选择要使用的加密库实现
#############################################################################
bccsp:
    default: SW
    sw:
        hash: SHA2
        security: 256
        filekeystore:
            # The directory used for the software file-based keystore
            keystore: msp/keystore

#############################################################################
# Multi CA section
#
# Each Fabric CA server contains one CA by default.  This section is used
# to configure multiple CAs in a single server.
#
# 1) --cacount <number-of-CAs>
# Automatically generate <number-of-CAs> non-default CAs.  The names of these
# additional CAs are "ca1", "ca2", ... "caN", where "N" is <number-of-CAs>
# This is particularly useful in a development environment to quickly set up
# multiple CAs. Note that, this config option is not applicable to intermediate CA server
# i.e., Fabric CA server that is started with intermediate.parentserver.url config
# option (-u command line option)
#
# 2) --cafiles <CA-config-files>
# For each CA config file in the list, generate a separate signing CA.  Each CA
# config file in this list MAY contain all of the same elements as are found in
# the server config file except port, debug, and tls sections.
# 多CA部分
# 
# 默认情况下，每个 Fabric CA 服务器包含一个CA。
# 本部分用于在单个服务器中配置多个 CA 。 
# 
# 1）--cacount 自动生成非默认CA。
# 这些附加CA的名称为“ ca1”，“ ca2”，...“ caN”，其中“ N”为在开发环境中快速设置多个CA时特别有用。
# 请注意，此配置选项不适用于中间CA服务器，即以中间体.parentserver.url配置选项（-u命令行选项）启动的Fabric CA服务器
# 
# 2）--cafiles 对于每个
# 列表中的CA配置文件，生成一个单独的签名CA。
# 该列表中的每个CA配置文件都可以包含与服务器配置文件中相同的所有元素，端口，调试和tls部分除外。
#
# Examples:
# fabric-ca-server start -b admin:adminpw --cacount 2
#
# fabric-ca-server start -b admin:adminpw --cafiles ca/ca1/fabric-ca-server-config.yaml
# --cafiles ca/ca2/fabric-ca-server-config.yaml
#
#############################################################################

cacount:

cafiles:

#############################################################################
# Intermediate CA section
#
# The relationship between servers and CAs is as follows:
#   1) A single server process may contain or function as one or more CAs.
#      This is configured by the "Multi CA section" above.
#   2) Each CA is either a root CA or an intermediate CA.
#   3) Each intermediate CA has a parent CA which is either a root CA or another intermediate CA.
#
# This section pertains to configuration of #2 and #3.
# If the "intermediate.parentserver.url" property is set,
# then this is an intermediate CA with the specified parent
# CA.
#
# parentserver section
#    url - The URL of the parent server
#    caname - Name of the CA to enroll within the server
#
# enrollment section used to enroll intermediate CA with parent CA
#    profile - Name of the signing profile to use in issuing the certificate
#    label - Label to use in HSM operations
#
# tls section for secure socket connection
#   certfiles - PEM-encoded list of trusted root certificate files
#   client:
#     certfile - PEM-encoded certificate file for when client authentication
#     is enabled on server
#     keyfile - PEM-encoded key file for when client authentication
#     is enabled on server
# 中间CA部分
# 
# 服务器与CA之间的关系如下：
# 1）一个服务器进程可能包含一个或多个CA或充当一个或多个CA。
# 这是由上面的“多CA部分”配置的。 
# 2）每个CA可以是根CA或中间CA。 
# 3）每个中间CA都有一个父CA，它可以是根CA或另一个CA。
# 
# 本节与＃2和＃3的配置有关。
# 如果设置了“ intermediate.parentserver.url”属性，则这是具有指定父CA的中间CA。 
# 
# parentserver 部分
#   url-父服务器的URL
#   caname-要在服务器注册部分中注册的CA名称，
# 
# enrollment 部分用于通过父CA注册中间CA
#   profile - 颁发证书时使用的签名配置文件的名称
#   label - 在HSM操作中使用的标签
# 
# tls部分，用于安全的套接字连接
#   certifiles - PEM编码的受信任的根证书文件列表
#   client:
#     certfile - 客户端身份验证时使用PEM编码的证书文件
#     在服务器上启用
#     keyfile - 客户端身份验证时使用PEM编码的密钥文件
#     在服务器上启用
#############################################################################
intermediate:
  parentserver:
    url:
    caname:

  enrollment:
    hosts:
    profile:
    label:

  tls:
    certfiles:
    client:
      certfile:
      keyfile:
